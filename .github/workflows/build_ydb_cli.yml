name: Build-YDB-CLI
run-name: Build YDB CLI
on:
  workflow_dispatch:
    inputs:
      commit_sha:
        type: string
        default: ""
      build-linux-amd:
        type: boolean
        description: Build YDB CLI for Linux (amd64)
        default: true
      build-linux-arm:
        type: boolean
        description: Build YDB CLI for Linux (arm64)
        default: true
      build-darwin-amd:
        type: boolean
        description: Build YDB CLI for MacOS (amd64)
        default: true
      build-darwin-arm:
        type: boolean
        description: Build YDB CLI for MacOS (arm64)
        default: true
      build-windows-amd:
        type: boolean
        description: Build YDB CLI for Windows (amd64)
        default: true
defaults:
  run:
    shell: bash

jobs:
  build-matrix:
    name: Build platform matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Create file with future platform list
        id: set-matrix
        run: |
          MATRIX='{"include":[]}'
          if [ "${{ inputs.build-linux-amd }}" == "true" ]; then
            MATRIX=$(echo $MATRIX | jq -c '.include += [{"os": "linux-amd", "runner": "ubuntu-latest", "shell": "bash", "binary": "ydb", "platform": "DEFAULT-LINUX-X86_64"}]')
            echo "Matrix after adding linux-amd: $MATRIX"
          fi
          if [ "${{ inputs.build-linux-arm }}" == "true" ]; then
            MATRIX=$(echo $MATRIX | jq -c '.include += [{"os": "linux-arm", "runner": "ubuntu-latest", "shell": "bash", "binary": "ydb", "platform": "DEFAULT-LINUX-AARCH64"}]')
            echo "Matrix after adding linux-arm: $MATRIX"
          fi
          if [ "${{ inputs.build-darwin-amd }}" == "true" ]; then
            MATRIX=$(echo $MATRIX | jq -c '.include += [{"os": "darwin-amd", "runner": "macos-13", "shell": "bash", "binary": "ydb", "platform": "DEFAULT-DARWIN-X86_64"}]')
            echo "Matrix after adding darwin-amd: $MATRIX"
          fi
          if [ "${{ inputs.build-darwin-arm }}" == "true" ]; then
            MATRIX=$(echo $MATRIX | jq -c '.include += [{"os": "darwin-arm", "runner": "macos-13", "shell": "bash", "binary": "ydb", "platform": "DEFAULT-DARWIN-ARM64"}]')
            echo "Matrix after adding darwin-arm: $MATRIX"
          fi
          if [ "${{ inputs.build-windows-amd }}" == "true" ]; then
            MATRIX=$(echo $MATRIX | jq -c '.include += [{"os": "windows-amd", "runner": "windows-latest", "shell": "bash", "binary": "ydb.exe", "platform": "DEFAULT-WIN-X86_64"}]')
            echo "Matrix after adding windows-amd: $MATRIX"
          fi

          echo "Final output matrix: $MATRIX"
          echo "matrix=$MATRIX" >> "$GITHUB_OUTPUT"
          MATRIX=$(echo $MATRIX | jq '.')
          echo "Final pretty printed matrix: $MATRIX"
          echo "Platform matrix: $MATRIX" >> "$GITHUB_STEP_SUMMARY"

  build-platform-specific-binary:
    strategy:
      matrix: ${{ fromJSON(needs.build-matrix.outputs.matrix) }}
    name: Build ${{ matrix.os }} binary
    needs: build-matrix
    runs-on: ${{ matrix.runner }}
    defaults:
      run:
        shell: ${{ matrix.shell }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.commit_sha }}

    - name: Print debug information
      run: |
        uname -a
        echo "YDB CLI version: $(cat ydb/apps/ydb/version.txt) (read from ydb/apps/ydb/version.txt)"

    - name: Install LLVM/Clang 18 for Windows
      if: ${{ matrix.os == 'windows-amd' }}
      uses: KyleMayes/install-llvm-action@v2
      with:
        version: "18.1.8"
        cached: false

    - name: Debug clang installation for Windows
      if: ${{ matrix.os == 'windows-amd' }}
      shell: bash
      run: |
        echo "=== Clang Debug Information ==="
        echo "PATH: $PATH"
        echo "LLVM_PATH: $LLVM_PATH"
        echo ""
        echo "=== Which clang ==="
        which clang || echo "clang not found in PATH"
        which clang++ || echo "clang++ not found in PATH"
        which clang-cl || echo "clang-cl not found in PATH"
        echo ""
        echo "=== Clang version ==="
        clang --version || echo "clang --version failed"
        echo ""
        echo "=== Clang-cl version ==="
        clang-cl --version || echo "clang-cl --version failed"
        echo ""

    # Create LLVM tool symlinks and patch fix_msvc_output.py to handle None arguments
    - name: Setup LLVM symlinks with Microsoft ml64.exe
      if: ${{ matrix.os == 'windows-amd' }}
      shell: cmd
      run: |
        echo === Finding Microsoft ml64.exe ===
        where ml64.exe 2>nul || echo ml64.exe not found in PATH
        
        set "ML64_PATH="
        echo Searching in Visual Studio paths...
        
        REM Check VS 2022 Enterprise first
        if exist "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\" (
          echo Found Visual Studio Enterprise
          for /d %%v in ("C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\*") do (
            if exist "%%v\bin\Hostx64\x64\ml64.exe" (
              echo Found ml64.exe in Enterprise
              set "ML64_PATH=%%v\bin\Hostx64\x64\ml64.exe"
              goto :found
            )
            if exist "%%v\bin\Hostx64\x64\ml.exe" (
              echo Found ml.exe in Enterprise
              if not defined ML64_PATH (
                set "ML64_PATH=%%v\bin\Hostx64\x64\ml.exe"
              )
            )
          )
        ) else (
          echo VS Enterprise not found
        )
        
        REM Check VS 2022 Professional if not found
        if not defined ML64_PATH (
          if exist "C:\Program Files\Microsoft Visual Studio\2022\Professional\VC\Tools\MSVC\" (
            echo Found Visual Studio Professional
            for /d %%v in ("C:\Program Files\Microsoft Visual Studio\2022\Professional\VC\Tools\MSVC\*") do (
              if exist "%%v\bin\Hostx64\x64\ml64.exe" (
                echo Found ml64.exe in Professional
                set "ML64_PATH=%%v\bin\Hostx64\x64\ml64.exe"
                goto :found
              )
              if exist "%%v\bin\Hostx64\x64\ml.exe" (
                echo Found ml.exe in Professional
                if not defined ML64_PATH (
                  set "ML64_PATH=%%v\bin\Hostx64\x64\ml.exe"
                )
              )
            )
          ) else (
            echo VS Professional not found
          )
        )
        
        REM Check Build Tools if still not found
        if not defined ML64_PATH (
          if exist "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC\" (
            echo Found Visual Studio Build Tools
            for /d %%v in ("C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC\*") do (
              if exist "%%v\bin\Hostx64\x64\ml64.exe" (
                echo Found ml64.exe in Build Tools
                set "ML64_PATH=%%v\bin\Hostx64\x64\ml64.exe"
                goto :found
              )
              if exist "%%v\bin\Hostx64\x64\ml.exe" (
                echo Found ml.exe in Build Tools
                if not defined ML64_PATH (
                  set "ML64_PATH=%%v\bin\Hostx64\x64\ml.exe"
                )
              )
            )
          ) else (
            echo VS Build Tools not found
          )
        )
        :found
        
        echo === Creating symbolic links ===
        mklink "C:\Program Files\LLVM\bin\lib.exe" "C:\Program Files\LLVM\bin\llvm-lib.exe"
        mklink "C:\Program Files\LLVM\bin\lib" "C:\Program Files\LLVM\bin\llvm-lib.exe"
        
        if defined ML64_PATH (
          echo Using Microsoft assembler
          mklink "C:\Program Files\LLVM\bin\ml.exe" "%ML64_PATH%"
          mklink "C:\Program Files\LLVM\bin\ml" "%ML64_PATH%"
          echo YA_ASSEMBLER_TYPE=MICROSOFT >> %GITHUB_ENV%
        ) else (
          echo Using LLVM assembler as fallback
          mklink "C:\Program Files\LLVM\bin\ml.exe" "C:\Program Files\LLVM\bin\llvm-ml.exe"
          mklink "C:\Program Files\LLVM\bin\ml" "C:\Program Files\LLVM\bin\llvm-ml.exe"
          echo YA_ASSEMBLER_TYPE=LLVM >> %GITHUB_ENV%
        )

    - name: Create patch script for fix_msvc_output.py
      if: ${{ matrix.os == 'windows-amd' }}
      shell: cmd
      env:
        YA_ASSEMBLER_TYPE: ${{ env.YA_ASSEMBLER_TYPE }}
      run: |
        echo import sys > patch_script.py
        echo import re >> patch_script.py
        echo with open('build/scripts/fix_msvc_output.py', 'r') as f: >> patch_script.py
        echo     content = f.read() >> patch_script.py
        echo. >> patch_script.py
        echo # Fix None handling for assembler >> patch_script.py
        echo content = content.replace( >> patch_script.py
        echo     'args = sys.argv[1:]', >> patch_script.py
        echo     '''args = sys.argv[1:] >> patch_script.py
        echo     print(f"DEBUG: Original sys.argv[1:] = {args}", file=sys.stderr) >> patch_script.py
        echo     original_had_none = len(args) ^> 1 and args[1] == 'None' >> patch_script.py
        echo     args = [arg for arg in args if arg != 'None'] >> patch_script.py
        echo     print(f"DEBUG: Filtered args = {args}", file=sys.stderr) >> patch_script.py
        echo     if len(args) ^>= 1 and args[0] == 'ml' and original_had_none: >> patch_script.py
        echo         args.insert(1, 'C:/Program Files/LLVM/bin/ml.exe') >> patch_script.py
        echo         # Check assembler type via environment variable >> patch_script.py
        echo         import os >> patch_script.py
        echo         assembler_type = os.environ.get('YA_ASSEMBLER_TYPE', 'LLVM') >> patch_script.py
        echo         if assembler_type == 'LLVM': >> patch_script.py
        echo             args.insert(2, '--m64') >> patch_script.py
        echo             print(f"DEBUG: Using LLVM ml.exe, added --m64 flag", file=sys.stderr) >> patch_script.py
        echo         else: >> patch_script.py
        echo             print(f"DEBUG: Using Microsoft ml64.exe, no --m64 needed", file=sys.stderr) >> patch_script.py
        echo         print(f"DEBUG: Fixed ml args = {args}", file=sys.stderr)''' >> patch_script.py
        echo ) >> patch_script.py
        echo. >> patch_script.py
        echo with open('build/scripts/fix_msvc_output.py', 'w') as f: >> patch_script.py
        echo     f.write(content) >> patch_script.py
        python patch_script.py

    - name: Verify patch and assembler setup
      if: ${{ matrix.os == 'windows-amd' }}
      shell: cmd
      env:
        YA_ASSEMBLER_TYPE: ${{ env.YA_ASSEMBLER_TYPE }}
      run: |
        echo === Verifying patch ===
        type build\scripts\fix_msvc_output.py | findstr "original_had_none" >nul && echo Patch applied successfully || echo Patch verification failed
        
        echo === Verifying assembler setup ===
        echo Assembler type: ${{ env.YA_ASSEMBLER_TYPE }}
        if exist "C:\Program Files\LLVM\bin\ml.exe" (
          echo Assembler symlink created successfully
        ) else (
          echo ERROR: Assembler symlink not created
        )

    - name: Build windows binary with ya make using LLVM toolchain (with ASM)
      if: ${{ matrix.os == 'windows-amd' }}
      shell: cmd
      continue-on-error: true
      id: build_with_asm
      env:
        YA_ASSEMBLER_TYPE: ${{ env.YA_ASSEMBLER_TYPE }}
      run: ${{ '"%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=amd64' }} && set "PATH=C:\Program Files\LLVM\bin;%PATH%" && python ya make ydb/apps/ydb -r -DUSE_SSE4=no --c-compiler="C:\Program Files\LLVM\bin\clang-cl.exe" --cxx-compiler="C:\Program Files\LLVM\bin\clang-cl.exe" -o ./

    - name: Build windows binary without ASM optimizations (fallback)
      if: ${{ matrix.os == 'windows-amd' && steps.build_with_asm.outcome == 'failure' }}
      shell: cmd
      env:
        YA_ASSEMBLER_TYPE: ${{ env.YA_ASSEMBLER_TYPE }}
      run: |
        echo === First build failed, trying without ASM optimizations ===
        echo Disabling OpenSSL ASM optimizations for compatibility
        ${{ '"%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=amd64' }} && set "PATH=C:\Program Files\LLVM\bin;%PATH%" && python ya make ydb/apps/ydb -r -DUSE_SSE4=no -DOPENSSL_NO_ASM=yes --c-compiler="C:\Program Files\LLVM\bin\clang-cl.exe" --cxx-compiler="C:\Program Files\LLVM\bin\clang-cl.exe" -o ./
    
    - name: Build unix binary with ya make
      if: ${{ matrix.os != 'windows-amd' }}
      run: ./ya make ydb/apps/ydb -r -DUSE_SSE4=no --target-platform ${{ matrix.platform }}

    - name: Upload binary to artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-binary
        path: ydb/apps/ydb/${{ matrix.binary }}
        if-no-files-found: error
        retention-days: 1

  gather-and-push-to-s3:
    name: Gather built binaries and push to s3
    needs: build-platform-specific-binary
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commit_sha }}
      - name: Get YDB CLI version from ydb/apps/ydb/version.txt
        id: getver
        run: echo "cli_version=$(cat ydb/apps/ydb/version.txt)" >> $GITHUB_OUTPUT
      - name: Print YDB CLI version ${{ steps.getver.outputs.cli_version }}
        run: echo ${{ steps.getver.outputs.cli_version }}

      - name: Prepare directory for linux-amd binary
        if: ${{ inputs.build-linux-amd }}
        run: mkdir -p ${{ steps.getver.outputs.cli_version }}/linux/amd64
      - name: Prepare directory for linux-arm binary
        if: ${{ inputs.build-linux-arm }}
        run: mkdir -p ${{ steps.getver.outputs.cli_version }}/linux/arm64
      - name: Prepare directory for darwin-amd binary
        if: ${{ inputs.build-darwin-amd }}
        run: mkdir -p ${{ steps.getver.outputs.cli_version }}/darwin/amd64
      - name: Prepare directory for darwin-arm binary
        if: ${{ inputs.build-darwin-arm }}
        run: mkdir -p ${{ steps.getver.outputs.cli_version }}/darwin/arm64
      - name: Prepare directory for windows-amd binary
        if: ${{ inputs.build-windows-amd }}
        run: mkdir -p ${{ steps.getver.outputs.cli_version }}/windows/amd64/unsigned

      - name: Copy linux-amd binary
        if: ${{ inputs.build-linux-amd }}
        uses: actions/download-artifact@v4
        with:
          name: linux-amd-binary
          path: ${{ steps.getver.outputs.cli_version }}/linux/amd64/
      - name: Copy linux-arm binary
        if: ${{ inputs.build-linux-arm }}
        uses: actions/download-artifact@v4
        with:
          name: linux-arm-binary
          path: ${{ steps.getver.outputs.cli_version }}/linux/arm64/
      - name: Copy darwin amd64 binary
        if: ${{ inputs.build-darwin-amd }}
        uses: actions/download-artifact@v4
        with:
          name: darwin-amd-binary
          path: ${{ steps.getver.outputs.cli_version }}/darwin/amd64/
      - name: Copy darwin arm64 binary
        if: ${{ inputs.build-darwin-arm }}
        uses: actions/download-artifact@v4
        with:
          name: darwin-arm-binary
          path: ${{ steps.getver.outputs.cli_version }}/darwin/arm64/
      - name: Copy windows-amd binary (unsigned)
        if: ${{ inputs.build-windows-amd }}
        uses: actions/download-artifact@v4
        with:
          name: windows-amd-binary
          path: ${{ steps.getver.outputs.cli_version }}/windows/amd64/unsigned/

      - name: Print resulting file hierarchy
        run: find ${{ steps.getver.outputs.cli_version }} | sed -e "s/[^-][^\/]*\// |/g" -e "s/|\([^ ]\)/|-\1/"

      - name: Download s3
        run: wget https://github.com/s3tools/s3cmd/releases/download/v2.4.0/s3cmd-2.4.0.tar.gz
      - name: Unzip s3
        run: tar -xf s3cmd-2.4.0.tar.gz
      - name: Install s3
        run: |
          cd s3cmd-2.4.0
          sudo python3 setup.py install
          cd ..

      - name: Upload to S3
        env:
          S3_HOST: "storage.yandexcloud.net"
          S3_BUCKET: "yandexcloud-ydb"
          S3_DNS_HOST_BUCKET: "%(bucket)s.storage.yandexcloud.net"
          S3_REGION: ru-central1
        run: s3cmd --access_key=${{ secrets.CLI_S3_KEY_ID }} --secret_key=${{ secrets.CLI_S3_KEY_SECRET_ID }} --host="$S3_HOST" --host-bucket="$S3_DNS_HOST_BUCKET" --region="$S3_REGION" sync --recursive ${{ steps.getver.outputs.cli_version }} "s3://$S3_BUCKET/release/"
      
