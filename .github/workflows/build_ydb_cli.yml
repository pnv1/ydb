name: Build-YDB-CLI
run-name: Build YDB CLI
on:
  workflow_dispatch:
    inputs:
      commit_sha:
        type: string
        default: ""
      build-linux-amd:
        type: boolean
        description: Build YDB CLI for Linux (amd64)
        default: true
      build-linux-arm:
        type: boolean
        description: Build YDB CLI for Linux (arm64)
        default: true
      build-darwin-amd:
        type: boolean
        description: Build YDB CLI for MacOS (amd64)
        default: true
      build-darwin-arm:
        type: boolean
        description: Build YDB CLI for MacOS (arm64)
        default: true
      build-windows-amd:
        type: boolean
        description: Build YDB CLI for Windows (amd64)
        default: true
defaults:
  run:
    shell: bash

jobs:
  build-matrix:
    name: Build platform matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Create file with future platform list
        id: set-matrix
        run: |
          MATRIX='{"include":[]}'
          if [ "${{ inputs.build-linux-amd }}" == "true" ]; then
            MATRIX=$(echo $MATRIX | jq -c '.include += [{"os": "linux-amd", "runner": "ubuntu-latest", "shell": "bash", "binary": "ydb", "platform": "DEFAULT-LINUX-X86_64"}]')
            echo "Matrix after adding linux-amd: $MATRIX"
          fi
          if [ "${{ inputs.build-linux-arm }}" == "true" ]; then
            MATRIX=$(echo $MATRIX | jq -c '.include += [{"os": "linux-arm", "runner": "ubuntu-latest", "shell": "bash", "binary": "ydb", "platform": "DEFAULT-LINUX-AARCH64"}]')
            echo "Matrix after adding linux-arm: $MATRIX"
          fi
          if [ "${{ inputs.build-darwin-amd }}" == "true" ]; then
            MATRIX=$(echo $MATRIX | jq -c '.include += [{"os": "darwin-amd", "runner": "macos-13", "shell": "bash", "binary": "ydb", "platform": "DEFAULT-DARWIN-X86_64"}]')
            echo "Matrix after adding darwin-amd: $MATRIX"
          fi
          if [ "${{ inputs.build-darwin-arm }}" == "true" ]; then
            MATRIX=$(echo $MATRIX | jq -c '.include += [{"os": "darwin-arm", "runner": "macos-13", "shell": "bash", "binary": "ydb", "platform": "DEFAULT-DARWIN-ARM64"}]')
            echo "Matrix after adding darwin-arm: $MATRIX"
          fi
          if [ "${{ inputs.build-windows-amd }}" == "true" ]; then
            MATRIX=$(echo $MATRIX | jq -c '.include += [{"os": "windows-amd", "runner": "windows-latest", "shell": "bash", "binary": "ydb.exe", "platform": "DEFAULT-WIN-X86_64"}]')
            echo "Matrix after adding windows-amd: $MATRIX"
          fi

          echo "Final output matrix: $MATRIX"
          echo "matrix=$MATRIX" >> "$GITHUB_OUTPUT"
          MATRIX=$(echo $MATRIX | jq '.')
          echo "Final pretty printed matrix: $MATRIX"
          echo "Platform matrix: $MATRIX" >> "$GITHUB_STEP_SUMMARY"

  build-platform-specific-binary:
    strategy:
      matrix: ${{ fromJSON(needs.build-matrix.outputs.matrix) }}
    name: Build ${{ matrix.os }} binary
    needs: build-matrix
    runs-on: ${{ matrix.runner }}
    defaults:
      run:
        shell: ${{ matrix.shell }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.commit_sha }}

    - name: Print debug information
      run: |
        uname -a
        echo "YDB CLI version: $(cat ydb/apps/ydb/version.txt) (read from ydb/apps/ydb/version.txt)"

    - name: Install LLVM/Clang 18 for Windows
      if: ${{ matrix.os == 'windows-amd' }}
      uses: KyleMayes/install-llvm-action@v2
      with:
        version: "18.1.8"
        cached: false

    - name: Show LLVM/Clang version for Windows
      if: ${{ matrix.os == 'windows-amd' }}
      shell: cmd
      run: |
        echo === LLVM/Clang version info ===
        clang-cl --version
        echo.

    # Create LLVM tool symlinks and patch fix_msvc_output.py to handle None arguments
    - name: Setup Windows tools
      if: ${{ matrix.os == 'windows-amd' }}
      shell: cmd
      run: |
        REM Find Microsoft ml64.exe in VS 2022 Enterprise  
        set "ML64_PATH="
        for /d %%v in ("C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\*") do (
          if exist "%%v\bin\Hostx64\x64\ml64.exe" (
            set "ML64_PATH=%%v\bin\Hostx64\x64\ml64.exe"
            goto :symlinks
          )
        )
        
        :symlinks
        REM Create required symlinks for LLVM/ya make integration
        mklink "C:\Program Files\LLVM\bin\lib.exe" "C:\Program Files\LLVM\bin\llvm-lib.exe" >nul 2>&1
        if defined ML64_PATH (
          mklink "C:\Program Files\LLVM\bin\ml.exe" "%ML64_PATH%" >nul 2>&1
        ) else (
          mklink "C:\Program Files\LLVM\bin\ml.exe" "C:\Program Files\LLVM\bin\llvm-ml.exe" >nul 2>&1
        )

    - name: Patch fix_msvc_output.py  
      if: ${{ matrix.os == 'windows-amd' }}
      shell: cmd
      run: |
        python -c "import re; f=open('build/scripts/fix_msvc_output.py','r'); c=f.read(); f.close(); c=re.sub(r'args = sys\.argv\[1:\]', 'args=[a for a in sys.argv[1:] if a!=\"None\"]\n    if len(args)>=2 and args[0]==\"link\" and \"/usr/bin/link.exe\" in args[1]: args[1]=\"C:/Program Files/LLVM/bin/lld-link.exe\"\n    if len(args)>=1 and args[0]==\"ml\" and len(sys.argv)>2 and sys.argv[2]==\"None\": args.insert(1,\"C:/Program Files/LLVM/bin/ml.exe\")', c); f=open('build/scripts/fix_msvc_output.py','w'); f.write(c); f.close(); print('Patch applied')"

    - name: Build YDB CLI
      if: ${{ matrix.os == 'windows-amd' }}
      shell: cmd
      run: |
        "%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=amd64 && set "PATH=C:\Program Files\LLVM\bin;%PATH%" && python ya make ydb/apps/ydb -r -DUSE_SSE4=no --c-compiler="C:\Program Files\LLVM\bin\clang-cl.exe" --cxx-compiler="C:\Program Files\LLVM\bin\clang-cl.exe" -o ./



    - name: Windows Build Success Analysis (VERBOSE DEBUG)
      if: ${{ matrix.os == 'windows-amd' && (steps.build_with_asm.outcome == 'success' || steps.build_with_asm.outcome == 'failure') }}
      shell: cmd
      env:
        YA_ASSEMBLER_TYPE: ${{ env.YA_ASSEMBLER_TYPE }}
      run: |
        echo ============================================================
        echo DEBUG: Windows Build Success Analysis
        echo ============================================================
        
        echo === STEP 1: Build Attempts Summary ===
        echo First build (with ASM): ${{ steps.build_with_asm.outcome }}
        echo Fallback triggered: ${{ steps.build_with_asm.outcome == 'failure' }}
        echo YA_ASSEMBLER_TYPE used: %YA_ASSEMBLER_TYPE%
        echo.
        
        echo === STEP 2: Key Findings Analysis ===
        if "${{ steps.build_with_asm.outcome }}" == "success" (
          echo SUCCESS SCENARIO: First build with ASM optimizations worked
          echo This means:
          echo   - Microsoft ml64.exe detection: ${{ env.YA_ASSEMBLER_TYPE == 'MICROSOFT' && 'SUCCESS' || 'FAILED - used LLVM fallback' }}
          echo   - fix_msvc_output.py patch: EFFECTIVE
          echo   - Git Bash link conflict resolution: WORKING
          echo   - LLVM toolchain integration: SUCCESSFUL
          if "%YA_ASSEMBLER_TYPE%" == "MICROSOFT" (
            echo   - Microsoft assembler compatibility: CONFIRMED
          ) else (
            echo   - LLVM assembler compatibility: SURPRISINGLY GOOD
          )
        ) else (
          echo FALLBACK SCENARIO: First build failed, checking if fallback worked...
          if exist "ydb\apps\ydb\ydb.exe" (
            echo Fallback build: SUCCESS
            echo This means:
            echo   - ASM optimizations were the blocker
            echo   - -DOPENSSL_NO_ASM=yes was necessary
            echo   - Basic LLVM toolchain works
            echo   - fix_msvc_output.py patch: PARTIALLY EFFECTIVE
          ) else (
            echo Both builds: FAILED
            echo This indicates deeper compatibility issues
          )
        )
        echo.
        
        echo === STEP 3: Component Necessity Assessment ===
        echo Based on the build results, we can assess:
        echo.
        echo CRITICAL COMPONENTS (cannot be removed):
        echo   - lib.exe symlink: REQUIRED (ya make dependency)
        echo   - fix_msvc_output.py Git Bash link patch: REQUIRED
        echo   - PATH modification: REQUIRED
        echo   - LLVM in PATH priority: REQUIRED
        echo.
        echo POTENTIALLY OPTIONAL COMPONENTS:
        if "%YA_ASSEMBLER_TYPE%" == "MICROSOFT" (
          echo   - Microsoft ml64.exe search: BENEFICIAL (enabled ASM)
          echo   - Complex VS path search: WORTH SIMPLIFYING
        ) else (
          echo   - Microsoft ml64.exe search: NOT FOUND (could simplify)
          echo   - LLVM ml.exe symlink: REQUIRED
          echo   - --m64 flag in fix_msvc_output.py: CRITICAL
        )
        if "${{ steps.build_with_asm.outcome }}" == "failure" (
          echo   - Fallback build step: REQUIRED (saved the build)
          echo   - -DOPENSSL_NO_ASM=yes: NECESSARY
        ) else (
          echo   - Fallback build step: UNUSED (could be optional)
        )
        echo.
        echo OPTIMIZATION OPPORTUNITIES:
        echo   - Reduce VS search complexity
        echo   - Simplify symlink creation logic  
        echo   - Remove unused debug output
        echo   - Consolidate environment setup
        echo.
        
        echo === STEP 4: Final Binary Verification ===
        if exist "ydb\apps\ydb\ydb.exe" (
          echo SUCCESS: ydb.exe was created
          echo File details:
          dir "ydb\apps\ydb\ydb.exe"
        ) else (
          echo FAILURE: ydb.exe was not created
        )
        
        echo ============================================================
        echo DEBUG: Windows Build Analysis Complete
        echo ============================================================
    
    - name: Build unix binary with ya make
      if: ${{ matrix.os != 'windows-amd' }}
      run: ./ya make ydb/apps/ydb -r -DUSE_SSE4=no --target-platform ${{ matrix.platform }}

    - name: Upload binary to artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-binary
        path: ydb/apps/ydb/${{ matrix.binary }}
        if-no-files-found: error
        retention-days: 1

  gather-and-push-to-s3:
    name: Gather built binaries and push to s3
    needs: build-platform-specific-binary
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commit_sha }}
      - name: Get YDB CLI version from ydb/apps/ydb/version.txt
        id: getver
        run: echo "cli_version=$(cat ydb/apps/ydb/version.txt)" >> $GITHUB_OUTPUT
      - name: Print YDB CLI version ${{ steps.getver.outputs.cli_version }}
        run: echo ${{ steps.getver.outputs.cli_version }}

      - name: Prepare directory for linux-amd binary
        if: ${{ inputs.build-linux-amd }}
        run: mkdir -p ${{ steps.getver.outputs.cli_version }}/linux/amd64
      - name: Prepare directory for linux-arm binary
        if: ${{ inputs.build-linux-arm }}
        run: mkdir -p ${{ steps.getver.outputs.cli_version }}/linux/arm64
      - name: Prepare directory for darwin-amd binary
        if: ${{ inputs.build-darwin-amd }}
        run: mkdir -p ${{ steps.getver.outputs.cli_version }}/darwin/amd64
      - name: Prepare directory for darwin-arm binary
        if: ${{ inputs.build-darwin-arm }}
        run: mkdir -p ${{ steps.getver.outputs.cli_version }}/darwin/arm64
      - name: Prepare directory for windows-amd binary
        if: ${{ inputs.build-windows-amd }}
        run: mkdir -p ${{ steps.getver.outputs.cli_version }}/windows/amd64/unsigned

      - name: Copy linux-amd binary
        if: ${{ inputs.build-linux-amd }}
        uses: actions/download-artifact@v4
        with:
          name: linux-amd-binary
          path: ${{ steps.getver.outputs.cli_version }}/linux/amd64/
      - name: Copy linux-arm binary
        if: ${{ inputs.build-linux-arm }}
        uses: actions/download-artifact@v4
        with:
          name: linux-arm-binary
          path: ${{ steps.getver.outputs.cli_version }}/linux/arm64/
      - name: Copy darwin amd64 binary
        if: ${{ inputs.build-darwin-amd }}
        uses: actions/download-artifact@v4
        with:
          name: darwin-amd-binary
          path: ${{ steps.getver.outputs.cli_version }}/darwin/amd64/
      - name: Copy darwin arm64 binary
        if: ${{ inputs.build-darwin-arm }}
        uses: actions/download-artifact@v4
        with:
          name: darwin-arm-binary
          path: ${{ steps.getver.outputs.cli_version }}/darwin/arm64/
      - name: Copy windows-amd binary (unsigned)
        if: ${{ inputs.build-windows-amd }}
        uses: actions/download-artifact@v4
        with:
          name: windows-amd-binary
          path: ${{ steps.getver.outputs.cli_version }}/windows/amd64/unsigned/

      - name: Print resulting file hierarchy
        run: find ${{ steps.getver.outputs.cli_version }} | sed -e "s/[^-][^\/]*\// |/g" -e "s/|\([^ ]\)/|-\1/"

      - name: Download s3
        run: wget https://github.com/s3tools/s3cmd/releases/download/v2.4.0/s3cmd-2.4.0.tar.gz
      - name: Unzip s3
        run: tar -xf s3cmd-2.4.0.tar.gz
      - name: Install s3
        run: |
          cd s3cmd-2.4.0
          sudo python3 setup.py install
          cd ..

      - name: Upload to S3
        env:
          S3_HOST: "storage.yandexcloud.net"
          S3_BUCKET: "yandexcloud-ydb"
          S3_DNS_HOST_BUCKET: "%(bucket)s.storage.yandexcloud.net"
          S3_REGION: ru-central1
        run: s3cmd --access_key=${{ secrets.CLI_S3_KEY_ID }} --secret_key=${{ secrets.CLI_S3_KEY_SECRET_ID }} --host="$S3_HOST" --host-bucket="$S3_DNS_HOST_BUCKET" --region="$S3_REGION" sync --recursive ${{ steps.getver.outputs.cli_version }} "s3://$S3_BUCKET/release/"